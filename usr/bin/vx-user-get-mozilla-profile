#!/usr/bin/python3
# -*- coding: UTF-8 -*-

# Copyright (c) 2013-2024 Jose Antonio Chavarría <jachavar@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Syntax: vx-user-get-mozilla-profile [<app>] [<user>]

import os
import sys
import errno
import argparse
import configparser

import vx_lib as vx

__author__ = 'Jose Antonio Chavarría'


def parse_args():
    parser = argparse.ArgumentParser(
        description='Obtain default profile of a Mozilla app (Firefox or '
        'Thunderbird) for an user',
        epilog='Vitalinux utility'
    )

    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='enable silence mode (no verbose)'
    )

    parser.add_argument(
        'app',
        action='store',
        choices=['firefox', 'firefox-esr', 'thunderbird'],
        default='firefox',
        nargs='?',
        help='Mozilla app (firefox [default], firefox-esr or thunderbird)'
    )

    parser.add_argument(
        'user',
        action='store',
        default=os.environ.get('USER'),
        nargs='?',
        help='user to check profile. if argument contains a slash, '
        'will be considered as directory to search (ex: /etc/skel)'
    )

    return vars(parser.parse_args())


def get_profile_path(ini_file):
    config = configparser.RawConfigParser()
    config.read(ini_file)

    sections = config.sections()
    not_profiles = ('General', 'Install')
    sections = [x for x in sections if not x.startswith(not_profiles)]

    if len(sections) == 1:
        if config.has_option(sections[0], 'path'):
            return config.get(sections[0], 'path')

    for section in sections:
        if section.startswith('Profile'):
            if config.has_option(section, 'default'):
                return config.get(section, 'path')

    return ''


def run():
    args = parse_args()

    if args['app'] == 'firefox':
        app_path = os.path.join('.mozilla', 'firefox')
    elif args['app'] == 'firefox-esr':
        app_path = os.path.join('.mozilla', 'firefox-esr')
    else:
        app_path = '.thunderbird'

    if '/' not in args['user']:
        user_info = vx.get_user_info(args['user'])
        if not user_info:
            if not args['quiet']:
                print('User {}, not exists!!!'.format(args['user']))
            sys.exit(errno.EACCES)

        home = user_info['home']
    else:
        home = args['user']

    ini_file = os.path.join(home, app_path, 'profiles.ini')

    if not os.path.exists(ini_file):
        if not args['quiet']:
            print(
                'Profile file ({}) not exists for that user ({})!!!'.format(
                    ini_file,
                    args['user']
                )
            )
        sys.exit(errno.EACCES)

    profile_path = os.path.join(home, app_path, get_profile_path(ini_file))
    if not os.path.exists(profile_path):
        if not args['quiet']:
            print(
                'Profile path ({}) not exists for that user ({})!!!'.format(
                    profile_path,
                    args['user']
                )
            )
        sys.exit(errno.EACCES)

    print(profile_path)

    sys.exit(os.EX_OK)  # no error


if __name__ == '__main__':
    run()
